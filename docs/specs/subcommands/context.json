{
  "product_vision": {
    "primary_goal": "Zero-dependency Go proxy that translates Anthropic API requests to OpenRouter format",
    "target_users": [
      "Claude Code developers wanting access to more AI models",
      "Cost-conscious developers using OpenRouter's competitive pricing", 
      "Local development users integrating with Ollama or self-hosted models",
      "Enterprise teams needing flexible model selection"
    ],
    "key_value_propositions": [
      "Seamless Integration: Drop-in replacement for existing Claude Code workflows",
      "Cost Optimization: Access to OpenRouter's competitive model pricing",
      "Model Diversity: Support for 100+ models from various providers",
      "Zero Dependencies: Single Go binary with standard library only",
      "Local Development: Built-in support for Ollama and self-hosted models"
    ]
  },
  "current_architecture": {
    "design_principles": [
      "Simplicity: Single binary with zero runtime dependencies",
      "Reliability: Robust error handling and graceful degradation", 
      "Performance: Efficient request/response transformation and streaming",
      "Maintainability: Clear separation of concerns despite monolithic structure",
      "Compatibility: Full API compatibility with Anthropic Messages API"
    ],
    "request_flow": "Claude Code → OpenRouter CC Proxy → OpenRouter API → AI Model Providers",
    "core_components": {
      "configuration_system": "Multi-source config loading (CLI flags → config files → env vars → defaults)",
      "message_transformation": "Bidirectional conversion between Anthropic and OpenAI/OpenRouter formats",
      "streaming_handler": "Server-Sent Events (SSE) processing with proper buffering",
      "model_mapping": "Configurable mappings for claude-3-opus/sonnet/haiku to any OpenRouter model",
      "tool_support": "Complete tool calling with JSON schema cleaning"
    },
    "tech_stack": {
      "language": "Go 1.21+",
      "dependencies": "Standard library only (net/http, encoding/json, etc.)",
      "build": "Single static binary compilation",
      "platforms": "Linux, macOS, Windows (AMD64 + ARM64)"
    }
  },
  "existing_cli": {
    "current_structure": "Single main() function with flag.StringVar() calls",
    "available_flags": [
      "-config: Path to config file (JSON)",
      "-port: Port to run the server on", 
      "-api-key: OpenRouter API key",
      "-base-url: OpenRouter base URL",
      "-model: Default model to use",
      "-opus-model: Model to map claude-opus requests to",
      "-sonnet-model: Model to map claude-sonnet requests to",
      "-haiku-model: Model to map claude-haiku requests to"
    ]
  },
  "technical_patterns": {
    "code_organization": "Single main.go file (~25k lines) with logical top-down organization",
    "naming_conventions": "PascalCase public functions, camelCase private, handlePrefix for HTTP handlers",
    "error_handling": "Explicit error checking with descriptive messages, proper HTTP status codes",
    "json_handling": "Heavy use of json.RawMessage for flexible content handling"
  },
  "dependencies": {
    "runtime_dependencies": "None - uses only Go standard library",
    "build_dependencies": ["golangci-lint", "GitHub Actions", "Make"]
  }
}