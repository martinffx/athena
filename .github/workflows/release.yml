name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Run format check
      run: |
        make format
        if ! git diff --quiet; then
          echo "Code is not formatted. Run 'make format' to fix:"
          git diff
          exit 1
        fi

    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Run tests
      run: make test

    - name: Test build
      run: make build

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: darwin
            goarch: amd64
            platform: darwin-amd64
          - goos: darwin
            goarch: arm64
            platform: darwin-arm64
          - goos: windows
            goarch: amd64
            platform: windows-amd64
          - goos: windows
            goarch: arm64
            platform: windows-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags="-s -w" -o dist/athena-${{ matrix.platform }}.exe ./cmd/athena
        else
          go build -ldflags="-s -w" -o dist/athena-${{ matrix.platform }} ./cmd/athena
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.platform }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "athena-*" -type f -exec cp {} release/ \;

        # Copy example configs to release
        cp athena.example.yml release/ || cp openrouter.example.yml release/athena.example.yml 2>/dev/null || true
        cp .env.example release/

        # Create README for release
        cat > release/README.md << 'EOF'
        # Athena - Anthropic to OpenRouter Proxy

        This proxy allows you to use Claude Code with OpenRouter's vast selection of models.

        ## Quick Start

        1. Download the appropriate binary for your platform
        2. Make it executable: `chmod +x athena-<platform>`
        3. Copy example config: `cp athena.example.yml ~/.config/athena/athena.yml`
        4. Edit config with your OpenRouter API key
        5. Run: `./athena-<platform> start` to launch daemon

        ## Files

        - `athena-<platform>`: The proxy server binary (includes daemon management + CLI)
        - `athena.example.yml`: Example YAML configuration
        - `.env.example`: Example environment variables file

        ## Configuration

        The proxy looks for configuration in this order:
        1. Command line flags
        2. Config files: `~/.config/athena/athena.yml` or `./athena.yml`
        3. Environment variables (including `.env` file)
        4. Built-in defaults

        ## Usage

        ### Daemon management:
        ```bash
        ./athena-<platform> start   # Start daemon in background
        ./athena-<platform> stop    # Stop daemon
        ./athena-<platform> status  # Check daemon status
        ```

        ### Run server directly (foreground):
        ```bash
        ./athena-<platform> --api-key YOUR_KEY
        ```

        The proxy runs on port 11434 by default and provides an Anthropic-compatible API that forwards to OpenRouter.
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body: |
          ## Athena Release

          Anthropic to OpenRouter proxy server with Claude Code integration and daemon management.

          ### Features
          - Maps Anthropic API calls to OpenRouter format
          - Supports streaming responses
          - Tool/function calling support
          - Configurable model mappings (Opus, Sonnet, Haiku)
          - Multiple configuration methods (CLI, config files, env vars)
          - Built-in daemon management (start, stop, status)
          - Structured logging

          ### Quick Start
          ```bash
          # Download binary for your platform
          chmod +x athena-<platform>

          # Launch daemon
          ./athena-<platform> start
          ```

          ### Downloads
          - **Linux AMD64**: `athena-linux-amd64`
          - **Linux ARM64**: `athena-linux-arm64`
          - **macOS Intel**: `athena-darwin-amd64`
          - **macOS Apple Silicon**: `athena-darwin-arm64`
          - **Windows AMD64**: `athena-windows-amd64.exe`
          - **Windows ARM64**: `athena-windows-arm64.exe`

          See the included `README.md` for complete setup instructions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}