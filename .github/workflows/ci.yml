name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not formatted. Run 'make fmt' to fix:"
          gofmt -s -l .
          echo ""
          echo "Diff:"
          gofmt -s -d .
          exit 1
        fi
        echo "✅ Code is properly formatted"

    - name: Run go mod tidy check
      run: |
        go mod tidy
        if ! git diff --quiet go.mod go.sum; then
          echo "❌ go.mod or go.sum is not tidy. Run 'go mod tidy' to fix"
          git diff go.mod go.sum
          exit 1
        fi
        echo "✅ go.mod and go.sum are tidy"

    - name: Run go vet
      run: |
        echo "🔍 Running go vet..."
        go vet ./...
        echo "✅ go vet passed"

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --verbose

    - name: Run tests
      run: |
        echo "🧪 Running tests..."
        go test -v -race -coverprofile=coverage.out ./...
        echo "✅ Tests passed"

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html

    - name: Test build
      run: |
        echo "🔨 Testing build..."
        go build -v -ldflags="-s -w" -o openrouter-cc-test main.go
        ./openrouter-cc-test --help > /dev/null
        echo "✅ Build successful"

  # Test cross-platform builds (only on main branch)
  cross-platform-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux  
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "🔨 Building for ${{ matrix.goos }}-${{ matrix.goarch }}..."
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags="-s -w" -o openrouter-cc-${{ matrix.goos }}-${{ matrix.goarch }}.exe main.go
        else
          go build -ldflags="-s -w" -o openrouter-cc-${{ matrix.goos }}-${{ matrix.goarch }} main.go
        fi
        echo "✅ Build successful"

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...