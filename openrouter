#!/bin/bash

# OpenRouter Proxy + Claude Code TUI Launcher
# This script starts the proxy server and launches Claude Code with the proxy configuration

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BINARY="$SCRIPT_DIR/openrouter-cc"
PROXY_PORT="${PROXY_PORT:-11434}"
PROXY_URL="http://localhost:$PROXY_PORT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[openrouter]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[openrouter]${NC} $1"
}

error() {
    echo -e "${RED}[openrouter]${NC} $1"
}

success() {
    echo -e "${GREEN}[openrouter]${NC} $1"
}

# Build binary if it doesn't exist
if [[ ! -f "$BINARY" ]]; then
    log "Building openrouter-cc binary..."
    if command -v go >/dev/null 2>&1; then
        cd "$SCRIPT_DIR"
        go build -o openrouter-cc main.go
        success "Built openrouter-cc successfully"
    else
        error "Go is not installed. Please install Go or build the binary manually."
        exit 1
    fi
fi

# Check if claude command exists
if ! command -v claude >/dev/null 2>&1; then
    error "Claude Code CLI not found. Please install Claude Code first."
    echo "Visit: https://claude.ai/code"
    exit 1
fi

# Function to check if port is available
check_port() {
    if lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

# Function to wait for server to start
wait_for_server() {
    local max_attempts=30
    local attempt=0
    
    log "Waiting for proxy server to start on port $PROXY_PORT..."
    
    while [[ $attempt -lt $max_attempts ]]; do
        if curl -s "$PROXY_URL/health" >/dev/null 2>&1; then
            success "Proxy server is ready!"
            return 0
        fi
        
        sleep 1
        ((attempt++))
        
        if [[ $((attempt % 5)) -eq 0 ]]; then
            log "Still waiting... (attempt $attempt/$max_attempts)"
        fi
    done
    
    error "Proxy server failed to start within 30 seconds"
    return 1
}

# Function to cleanup background processes
cleanup() {
    if [[ -n $PROXY_PID ]]; then
        log "Stopping proxy server (PID: $PROXY_PID)..."
        kill $PROXY_PID 2>/dev/null || true
        wait $PROXY_PID 2>/dev/null || true
    fi
}

# Set up signal handlers
trap cleanup EXIT INT TERM

# Check if proxy port is available
if ! check_port $PROXY_PORT; then
    warn "Port $PROXY_PORT is already in use. Trying to use existing proxy..."
    if curl -s "$PROXY_URL/health" >/dev/null 2>&1; then
        success "Found existing proxy server on port $PROXY_PORT"
    else
        error "Port $PROXY_PORT is occupied by another service"
        exit 1
    fi
else
    # Start the proxy server in background
    log "Starting openrouter-cc proxy server on port $PROXY_PORT..."
    "$BINARY" -port "$PROXY_PORT" "$@" &
    PROXY_PID=$!
    
    # Wait for server to be ready
    if ! wait_for_server; then
        exit 1
    fi
fi

# Export environment variables for Claude Code
export ANTHROPIC_BASE_URL="$PROXY_URL"

# Get API key from proxy config or environment
if [[ -z "$ANTHROPIC_API_KEY" ]]; then
    # Try to get from .env file
    if [[ -f "$SCRIPT_DIR/.env" ]]; then
        eval "$(grep -E '^OPENROUTER_API_KEY=' "$SCRIPT_DIR/.env" | head -1)"
        export ANTHROPIC_API_KEY="$OPENROUTER_API_KEY"
    fi
    
    # Try to get from config files
    if [[ -z "$ANTHROPIC_API_KEY" ]]; then
        for config in "$HOME/.config/openrouter-cc/openrouter.yml" "$HOME/.config/openrouter-cc/openrouter.json" "$SCRIPT_DIR/openrouter.yml" "$SCRIPT_DIR/openrouter.json"; do
            if [[ -f "$config" ]]; then
                if [[ "$config" == *.yml ]]; then
                    API_KEY=$(grep -E '^api_key:' "$config" | sed 's/^api_key:[[:space:]]*["\'"'"']?\([^"'"'"']*\)["\'"'"']?[[:space:]]*$/\1/')
                else
                    API_KEY=$(grep -o '"api_key"[[:space:]]*:[[:space:]]*"[^"]*"' "$config" | sed 's/.*"api_key"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
                fi
                if [[ -n "$API_KEY" ]]; then
                    export ANTHROPIC_API_KEY="$API_KEY"
                    break
                fi
            fi
        done
    fi
fi

if [[ -z "$ANTHROPIC_API_KEY" ]]; then
    warn "No API key found. Claude Code will prompt for authentication."
    warn "Set OPENROUTER_API_KEY in your .env file or config for automatic authentication."
fi

log "Launching Claude Code TUI..."
log "Proxy URL: $PROXY_URL"
log "API Key: ${ANTHROPIC_API_KEY:+***configured***}"

# Launch Claude Code
claude

# Cleanup happens automatically via trap